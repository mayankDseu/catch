import { PropType } from 'vue';
import { ChartData, Plugin } from 'chart.js/auto';
import * as chartjs from 'chart.js';
declare const CChart: import("vue").DefineComponent<{
    /**
     * Enables custom html based tooltips instead of standard tooltips.
     *
     * @default true
     */
    customTooltips: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The data object that is passed into the Chart.js chart (more info).
     */
    data: {
        type: PropType<ChartData<keyof chartjs.ChartTypeRegistry, (number | chartjs.ScatterDataPoint | chartjs.BubbleDataPoint | null)[], unknown> | ((canvas: HTMLCanvasElement) => ChartData)>;
        required: true;
    };
    /**
     * Height attribute applied to the rendered canvas.
     *
     * @default 150
     */
    height: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * ID attribute applied to the rendered canvas.
     */
    id: {
        type: StringConstructor;
    };
    /**
     * The options object that is passed into the Chart.js chartRef.value.
     *
     * {@link https://www.chartjs.org/docs/latest/general/options.html More Info}
     */
    options: {
        type: PropType<import("chart.js/types/utils")._DeepPartialObject<chartjs.CoreChartOptions<keyof chartjs.ChartTypeRegistry> & chartjs.ElementChartOptions<keyof chartjs.ChartTypeRegistry> & chartjs.PluginChartOptions<keyof chartjs.ChartTypeRegistry> & chartjs.DatasetChartOptions<keyof chartjs.ChartTypeRegistry> & chartjs.ScaleChartOptions<keyof chartjs.ChartTypeRegistry>>>;
    };
    /**
     * The plugins array that is passed into the Chart.js chart (more info)
     *
     * {@link https://www.chartjs.org/docs/latest/developers/plugins.html More Info}
     */
    plugins: {
        type: PropType<Plugin<keyof chartjs.ChartTypeRegistry, import("chart.js/types/basic").AnyObject>[]>;
    };
    /**
     * If true, will tear down and redraw chart on all updates.
     */
    redraw: BooleanConstructor;
    /**
     * Chart.js chart type.
     *
     * @type 'line' | 'bar' | 'radar' | 'doughnut' | 'polarArea' | 'bubble' | 'pie' | 'scatter'
     */
    type: {
        type: PropType<keyof chartjs.ChartTypeRegistry>;
        default: string;
    };
    /**
     * Width attribute applied to the rendered canvas.
     *
     * @default 300
     */
    width: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Put the chart into the wrapper div element.
     *
     * @default true
     */
    wrapper: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("getDatasetAtEvent" | "getElementAtEvent" | "getElementsAtEvent")[], "getDatasetAtEvent" | "getElementAtEvent" | "getElementsAtEvent", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Enables custom html based tooltips instead of standard tooltips.
     *
     * @default true
     */
    customTooltips: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The data object that is passed into the Chart.js chart (more info).
     */
    data: {
        type: PropType<ChartData<keyof chartjs.ChartTypeRegistry, (number | chartjs.ScatterDataPoint | chartjs.BubbleDataPoint | null)[], unknown> | ((canvas: HTMLCanvasElement) => ChartData)>;
        required: true;
    };
    /**
     * Height attribute applied to the rendered canvas.
     *
     * @default 150
     */
    height: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * ID attribute applied to the rendered canvas.
     */
    id: {
        type: StringConstructor;
    };
    /**
     * The options object that is passed into the Chart.js chartRef.value.
     *
     * {@link https://www.chartjs.org/docs/latest/general/options.html More Info}
     */
    options: {
        type: PropType<import("chart.js/types/utils")._DeepPartialObject<chartjs.CoreChartOptions<keyof chartjs.ChartTypeRegistry> & chartjs.ElementChartOptions<keyof chartjs.ChartTypeRegistry> & chartjs.PluginChartOptions<keyof chartjs.ChartTypeRegistry> & chartjs.DatasetChartOptions<keyof chartjs.ChartTypeRegistry> & chartjs.ScaleChartOptions<keyof chartjs.ChartTypeRegistry>>>;
    };
    /**
     * The plugins array that is passed into the Chart.js chart (more info)
     *
     * {@link https://www.chartjs.org/docs/latest/developers/plugins.html More Info}
     */
    plugins: {
        type: PropType<Plugin<keyof chartjs.ChartTypeRegistry, import("chart.js/types/basic").AnyObject>[]>;
    };
    /**
     * If true, will tear down and redraw chart on all updates.
     */
    redraw: BooleanConstructor;
    /**
     * Chart.js chart type.
     *
     * @type 'line' | 'bar' | 'radar' | 'doughnut' | 'polarArea' | 'bubble' | 'pie' | 'scatter'
     */
    type: {
        type: PropType<keyof chartjs.ChartTypeRegistry>;
        default: string;
    };
    /**
     * Width attribute applied to the rendered canvas.
     *
     * @default 300
     */
    width: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Put the chart into the wrapper div element.
     *
     * @default true
     */
    wrapper: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onGetDatasetAtEvent?: ((...args: any[]) => any) | undefined;
    onGetElementAtEvent?: ((...args: any[]) => any) | undefined;
    onGetElementsAtEvent?: ((...args: any[]) => any) | undefined;
}, {
    customTooltips: boolean;
    height: number;
    redraw: boolean;
    type: keyof chartjs.ChartTypeRegistry;
    width: number;
    wrapper: boolean;
}, {}>;
export default CChart;
